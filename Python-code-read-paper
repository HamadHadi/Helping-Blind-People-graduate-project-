# -*- coding: utf-8 -*-

import cv2
import time
import numpy as np
import pytesseract
from PIL import Image
from gtts import gTTS
import os
import codecs


##################
DELAY = 0.05
USE_CAM = 1
IS_FOUND = 0
MORPH = 9
CANNY = 250
##################
# 420x600 orani 105mmx150mm for paper in real size
_width  = 600.0
_height = 420.0
_margin = 0.0
##################

if USE_CAM: video_capture = cv2.VideoCapture(0)

corners = np.array(
	[
		[[  		_margin, _margin 			]],
		[[ 			_margin, _height + _margin  ]],
		[[ _width + _margin, _height + _margin  ]],
		[[ _width + _margin, _margin 			]],
	]
)

pts_dst = np.array( corners, np.float32 )

while True :

	if USE_CAM :
		ret, rgb = video_capture.read()
	else :
		ret = 1
		rgb = cv2.imread( "opencv.jpg", 1 )

	if ( ret ):

		gray = cv2.cvtColor( rgb, cv2.COLOR_BGR2GRAY )

		gray = cv2.bilateralFilter( gray, 1, 10, 120 )

		edges  = cv2.Canny( gray, 10, CANNY )

		kernel = cv2.getStructuringElement( cv2.MORPH_RECT, ( MORPH, MORPH ) )

		closed = cv2.morphologyEx( edges, cv2.MORPH_CLOSE, kernel )

		_,contours, h = cv2.findContours( closed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE )

		for cont in contours:

			if cv2.contourArea( cont ) > 5000 :

				arc_len = cv2.arcLength( cont, True )

				approx = cv2.approxPolyDP( cont, 0.1 * arc_len, True )

				if ( len( approx ) == 4 ):
					IS_FOUND = 1
					M = cv2.moments( cont )
					pts_src = np.array( approx, np.float32 )
					h, status = cv2.findHomography( pts_src, pts_dst )
					out = cv2.warpPerspective( gray, h, ( int( _width + _margin * 4 ), int( _height + _margin * 4 ) ) )
					cv2.drawContours( rgb, [approx], -1, ( 255, 0, 0 ), 2 )
				else : pass
		cv2.imshow( 'closed', closed )
		cv2.imshow( 'gray', gray )
		cv2.imshow( 'edges', edges )
		cv2.imshow( 'rgb', rgb )
		if IS_FOUND :
			cv2.imshow( 'out', out )

		if cv2.waitKey(27) & 0xFF == ord('q') :
			break

		if cv2.waitKey(27) & 0xFF == ord('c') :
			cv2.imwrite( 'ocvi_out.png', out )

			print "--> | Pictures Saved | <--"

		time.sleep(DELAY)

	else :
		print "--> | Stopped | <--"
		break
if USE_CAM : video_capture.release()
cv2.destroyAllWindows()


## Get input ###
choice = raw_input('      للعربية اضفط 1 \n OR \n    For English press 2 :\n ')
 
### Convert string to int type ##
choice = int(choice)
### Take action as per selected menu-option ###
if choice == 1:
    print "\n"
    print "--> | الان يقوم بكتابة الملف فقط أنتظر | <--"
    print "\n"
    img = Image.open('ocvi_out.png')
    pytesseract.pytesseract.tesseract_cmd = 'C:/Program Files (x86)/Tesseract-OCR/tesseract'
    result = pytesseract.image_to_string(img, lang='ara')
    with open('Text.txt', mode='w') as file: file.write (result.encode("utf-8"))
    file=codecs.open("Text.txt","r","utf-8")
    text= file.read()
    print text
    print "\n"
    print "--> | الان يقوم بقرائه الملف فقط أنتظر | <--"
    print "\n"
    with codecs.open("Text.txt","r","utf-8") as file: file = file.read()
    speak = gTTS(file,lang='ar')
    speak.save("audio_new.mp3")
    os.startfile('audio_new.mp3')
elif choice == 2:
        print "\n"
        print "--> | Now Writing The File Just Wait | <--"
        print "\n"
        img = Image.open('ocvi_out.png')
        pytesseract.pytesseract.tesseract_cmd = 'C:/Program Files (x86)/Tesseract-OCR/tesseract'
        result = pytesseract.image_to_string(img, lang='eng')
        with open('Text.txt', mode='w') as file:
            file.write (result.encode("utf-8"))
            file=codecs.open("Text.txt","r","utf-8")
            text= file.read()
            print text
        print "\n"
        print "--> | Now Will Be Speak Just Wait | <--"
        print "\n"
        with codecs.open("Text.txt","r","utf-8") as file:
            file = file.read()
            speak = gTTS(file,lang='en')
            speak.save("audio_new.mp3")
            os.startfile('audio_new.mp3')
